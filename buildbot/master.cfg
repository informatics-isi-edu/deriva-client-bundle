# -*- python -*-
# ex: set filetype=python:

from copy import deepcopy
from buildbot.plugins import *
from buildbot.process.properties import Interpolate

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['workers'] = [worker.Worker("Windows-10", "xxxxx"), worker.Worker("MacOS-10_11", "xxxxx")]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9990}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.

c['change_source'] = [
        changes.GitPoller(
                'git://github.com/informatics-isi-edu/deriva-py.git',
                project='deriva-py',
                workdir='deriva-py.git',
                pollAtLaunch=True,
                pollinterval=300),
        changes.GitPoller(
                'git://github.com/informatics-isi-edu/deriva-catalog-manage.git',
                project='deriva-catalog-manage',
                workdir='deriva-catalog-manage.git',
                pollAtLaunch=True,
                pollinterval=300),
        changes.GitPoller(
                'git://github.com/informatics-isi-edu/deriva-client-bundle.git',
                project='deriva-client-bundle',
                workdir='deriva-client-bundle.git',
                pollAtLaunch=True,
                pollinterval=300),
        changes.GitPoller(
                'git://github.com/informatics-isi-edu/deriva-qt.git',
                project='deriva-qt',
                workdir='deriva-qt.git',
                pollAtLaunch=True,
                pollinterval=300)]

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.

c['schedulers'] = []
c['schedulers'].append(
        schedulers.SingleBranchScheduler(
                name="deriva-py",
                change_filter=util.ChangeFilter(project=['deriva-py']),
                treeStableTimer=300,
                builderNames=["deriva-client-bundle-Windows", "deriva-client-bundle-MacOS"]))
c['schedulers'].append(
        schedulers.SingleBranchScheduler(
                name="deriva-catalog-manage",
                change_filter=util.ChangeFilter(project=['deriva-catalog-manage']),
                treeStableTimer=300,
                builderNames=["deriva-client-bundle-Windows", "deriva-client-bundle-MacOS"]))
c['schedulers'].append(
        schedulers.SingleBranchScheduler(
                name="deriva-qt",
                change_filter=util.ChangeFilter(project=['deriva-qt']),
                treeStableTimer=300,
                builderNames=["deriva-client-bundle-Windows", "deriva-client-bundle-MacOS"]))
c['schedulers'].append(
        schedulers.SingleBranchScheduler(
                name="deriva-client-bundle",
                change_filter=util.ChangeFilter(project=['deriva-client-bundle']),
                treeStableTimer=300,
                builderNames=["deriva-client-bundle-Windows", "deriva-client-bundle-MacOS"]))
c['schedulers'].append(
        schedulers.ForceScheduler(
                name="force",
                builderNames=["deriva-client-bundle-Windows", "deriva-client-bundle-MacOS"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

factory = util.BuildFactory()
# check out the source
factory.addStep(
        steps.Git(
                repourl='git://github.com/informatics-isi-edu/deriva-py.git',
                workdir='deriva-py',
                name='clone deriva-py',
                alwaysUseLatest=True,
                clobberOnFailure=True,
                retryFetch=True,
                mode='full',
                method='clobber'))
factory.addStep(
        steps.Git(
                repourl='git://github.com/informatics-isi-edu/deriva-catalog-manage.git',
                workdir='deriva-catalog-manage',
                name='clone deriva-catalog-manage',
                alwaysUseLatest=True,
                clobberOnFailure=True,
                retryFetch=True,
                mode='full',
                method='clobber'))
factory.addStep(
        steps.Git(
                repourl='git://github.com/informatics-isi-edu/deriva-qt.git',
                workdir='deriva-qt',
                name='clone deriva-qt',
                alwaysUseLatest=True,
                clobberOnFailure=True,
                retryFetch=True,
                mode='full',
                method='clobber'))
factory.addStep(
        steps.Git(
                repourl='git://github.com/informatics-isi-edu/deriva-client-bundle.git',
                workdir='deriva-client-bundle',
                name='clone deriva-client-bundle',
                alwaysUseLatest=True,
                clobberOnFailure=True,
                retryFetch=True,
                mode='full',
                method='clobber'))

# install deriva-py dependencies and code
factory.addStep(
        steps.ShellSequence(
                name='install deriva-py',
                description='installing',
                descriptionDone='install',
                workdir='deriva-py',
                env={"PYTHONPATH": "."},
                commands=[
                        util.ShellArg(command=['pip', 'install', '--upgrade', '.'], logfile='install deriva-py')]))

# install deriva-catalog-manage dependencies and code
factory.addStep(
        steps.ShellSequence(
                name='install deriva-catalog-manage',
                description='installing',
                descriptionDone='install',
                workdir='deriva-catalog-manage',
                env={"PYTHONPATH": "."},
                commands=[
                        util.ShellArg(command=['pip', 'install', '--upgrade', '.'], logfile='install deriva-catalog-manage')]))

# install deriva-qt dependencies and code
factory.addStep(
        steps.ShellSequence(
                name='install deriva-qt',
                description='installing',
                descriptionDone='install',
                workdir='deriva-qt',
                env={"PYTHONPATH": "."},
                commands=[
                        util.ShellArg(command=['pip', 'install', '--upgrade', '.'], logfile='install deriva-qt')]))

factory.addStep(
    steps.SetPropertyFromCommand(
                name="get deriva-client-bundle version",
                workdir="deriva-client-bundle",
                command="python ./version.py", property="deriva_client_bundle_version"))


winFactory = deepcopy(factory)

# generate windows bundle
winFactory.addStep(
        steps.ShellSequence(
                name='create windows bundle',
                description='compiling',
                descriptionDone='bundle',
                workdir='deriva-client-bundle',
                env={"PYTHONPATH": "."},
                commands=[
                        util.ShellArg(command=['rm', '-rf', './build ./dist'], logfile='clean build dirs'),
                        util.ShellArg(command=['python', 'setup.py', 'bdist_msi'], logfile='build msi installer')]))

# upload windows bundle archives
winFactory.addStep(
        steps.FileUpload(
                name=util.Interpolate('Upload File: DERIVA-Client-Tools-%(prop:deriva_client_bundle_version)s-win-amd64.msi'),
                workdir='deriva-client-bundle/dist',
                workersrc=util.Interpolate('DERIVA-Client-Tools-%(prop:deriva_client_bundle_version)s-win-amd64.msi'),
                                mode=0o644,
                masterdest=util.Interpolate("/lfs1/buildbot/public_html/deriva-client-bundle/DERIVA-Client-Tools-%(prop:deriva_client_bundle_version)s-win-amd64.msi"),
                url=util.Interpolate("http://buildbot.isrd.isi.edu/~buildbot/deriva-client-bundle/DERIVA-Client-Tools-%(prop:deriva_client_bundle_version)s-win-amd64.msi")))

macFactory = deepcopy(factory)

# generate mac bundle
macFactory.addStep(
        steps.ShellSequence(
                name='create mac bundle',
                description='compiling',
                descriptionDone='bundle',
                workdir='deriva-client-bundle',
                env={"PYTHONPATH": "."},
                commands=[
                        util.ShellArg(command=['rm', '-rf', './build'], logfile='clean build dir'),
                        util.ShellArg(command=['python', 'setup.py', 'bdist_mac'], logfile='build mac app'),
                        util.ShellArg(command=['packagesbuild', '--verbose', './packaging/MacOS/Deriva Client Tools.pkgproj'], logfile='create mac installer package'),
                        util.ShellArg(command=['hdiutil', 'create', '-fs', 'HFSX', '-format', 'UDZO', '-imagekey', 'zlib-level=9', '-srcfolder', './build/Deriva Client Tools.mpkg', '-volname', util.Interpolate('DERIVA Client Tools-%(prop:deriva_client_bundle_version)s'), util.Interpolate('./build/DERIVA-Client-Tools-%(prop:deriva_client_bundle_version)s-osx')], logfile='create dmg from installer package')]))

# upload mac bundle
macFactory.addStep(
        steps.FileUpload(
                name=util.Interpolate('Upload File: DERIVA-Client-Tools-%(prop:deriva_client_bundle_version)s-osx.dmg'),
                workdir='deriva-client-bundle/build',
                workersrc=util.Interpolate('DERIVA-Client-Tools-%(prop:deriva_client_bundle_version)s-osx.dmg'),
                                mode=0o644,
                masterdest=util.Interpolate("/lfs1/buildbot/public_html/deriva-client-bundle/DERIVA-Client-Tools-%(prop:deriva_client_bundle_version)s-osx.dmg"),
                url=util.Interpolate("http://buildbot.isrd.isi.edu/~buildbot/deriva-client-bundle/DERIVA-Client-Tools-%(prop:deriva_client_bundle_version)s-osx.dmg")))

c['builders'] = []
c['builders'].append(
    util.BuilderConfig(
                name="deriva-client-bundle-Windows",
                workernames=["Windows-10"],
                factory=winFactory))

c['builders'].append(
    util.BuilderConfig(
                name="deriva-client-bundle-MacOS",
                workernames=["MacOS-10_11"],
                factory=macFactory))

####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.
context = Interpolate("buildbot/%(prop:buildername)s")
gs = reporters.GitHubStatusPush(token='xxxxxx',
                                context=context,
                                startDescription='Build started.',
                                endDescription='Build finished.')
c['services'] = [gs]

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "ISRD Buildbot"
c['titleURL'] = "https://github.com/informatics-isi-edu/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = "http://buildbot.isrd.isi.edu/"

# minimalistic config to activate new web UI
c['www'] = dict(port=8010,
                plugins=dict(waterfall_view={}, console_view={}, grid_view={}))

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
