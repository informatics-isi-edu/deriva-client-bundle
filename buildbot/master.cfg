# -*- python -*-
# ex: set filetype=python:

import os
import re
from copy import deepcopy
from datetime import datetime
from buildbot.plugins import *
from buildbot.process.properties import Interpolate

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# date stamp renderer
@util.renderer
def now(props):
    return datetime.strftime(datetime.now(), "%Y%m%d%H%M")


# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### SECRETS

secrets_dir = "/lfs1/buildbot/secrets"
c['secretsProviders'] = [secrets.SecretInAFile(dirname=secrets_dir)]
# workaround for GitHub auth secret interpolation
def get_secret(s):
    with open(os.path.join(secrets_dir, s), 'r') as secrets_file:
        return secrets_file.read().replace('\n', '')


####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['workers'] = [
        worker.Worker("Windows-10", util.Secret("win10-dev")),
        worker.Worker("Windows-10-release", util.Secret("win10-rel")),
        worker.Worker("Windows-10-docs", util.Secret("win10-docs")),
        worker.Worker("MacOS-10_11", util.Secret("mac10-11-dev")),
        worker.Worker("MacOS-10_11-release", util.Secret("mac10-11-rel"))
]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9990}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.

c['change_source'] = [
        changes.GitPoller(
                'git://github.com/informatics-isi-edu/deriva-py.git',
                project='deriva-py',
                workdir='deriva-py.git',
                pollAtLaunch=True,
                pollinterval=300),
        changes.GitPoller(
                'git://github.com/informatics-isi-edu/deriva-catalog-manage.git',
                project='deriva-catalog-manage',
                workdir='deriva-catalog-manage.git',
                pollAtLaunch=True,
                pollinterval=301),
        changes.GitPoller(
                'git://github.com/informatics-isi-edu/deriva-qt.git',
                project='deriva-qt',
                workdir='deriva-qt.git',
                pollAtLaunch=True,
                pollinterval=302),
        changes.GitPoller(
                'git://github.com/informatics-isi-edu/deriva-client.git',
                project='deriva-client',
                workdir='deriva-client.git',
                only_tags=True,
                pollAtLaunch=True,
                pollinterval=303),
        changes.GitPoller(
                'git://github.com/informatics-isi-edu/deriva-web.git',
                project='deriva-web',
                workdir='deriva-web.git',
                pollAtLaunch=True,
                pollinterval=304),
        changes.GitPoller(
                'git://github.com/informatics-isi-edu/ermrest.git',
                project='ermrest',
                workdir='ermrest.git',
                pollAtLaunch=True,
                pollinterval=305),
        changes.GitPoller(
                'git://github.com/informatics-isi-edu/ermrestjs.git',
                project='ermrestjs',
                workdir='ermrestjs.git',
                pollAtLaunch=True,
                pollinterval=306),
        changes.GitPoller(
                'git://github.com/informatics-isi-edu/chaise.git',
                project='chaise',
                workdir='chaise.git',
                pollAtLaunch=True,
                pollinterval=307),
        changes.GitPoller(
                'git://github.com/informatics-isi-edu/hatrac.git',
                project='hatrac',
                workdir='hatrac.git',
                pollAtLaunch=True,
                pollinterval=308),
        changes.GitPoller(
                'git://github.com/informatics-isi-edu/deriva-client-bundle.git',
                project='deriva-client-bundle',
                workdir='deriva-client-bundle.git',
                pollAtLaunch=True,
                pollinterval=309)
]

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.


def changeIsImportant(change):
    if re.search(r'\[ *skip *ci *\]', change.comments):
        return False
    elif re.search(r'\[ *ci *skip *\]', change.comments):
        return False
    return True


def isDocsChange(change):
#    if not changeIsImportant(change):
#        return False

    for name in change.files:
        if name.startswith("docs/"):
            return True
    return False


c['schedulers'] = []
c['schedulers'].append(
        schedulers.SingleBranchScheduler(
                name="deriva-py",
                change_filter=util.ChangeFilter(project=['deriva-py']),
                treeStableTimer=360,
                fileIsImportant=changeIsImportant,
                builderNames=["deriva-client-bundle-Windows", "deriva-client-bundle-MacOS"]))
c['schedulers'].append(
        schedulers.SingleBranchScheduler(
                name="deriva-catalog-manage",
                change_filter=util.ChangeFilter(project=['deriva-catalog-manage']),
                treeStableTimer=360,
                fileIsImportant=changeIsImportant,
                builderNames=["deriva-client-bundle-Windows", "deriva-client-bundle-MacOS"]))
c['schedulers'].append(
        schedulers.SingleBranchScheduler(
                name="deriva-qt",
                change_filter=util.ChangeFilter(project=['deriva-qt']),
                treeStableTimer=360,
                fileIsImportant=changeIsImportant,
                builderNames=["deriva-client-bundle-Windows", "deriva-client-bundle-MacOS"]))
c['schedulers'].append(
        schedulers.SingleBranchScheduler(
                name="deriva-client-bundle",
                change_filter=util.ChangeFilter(project=['deriva-client-bundle']),
                treeStableTimer=360,
                fileIsImportant=changeIsImportant,
                builderNames=["deriva-client-bundle-Windows", "deriva-client-bundle-MacOS"]))
c['schedulers'].append(
        schedulers.SingleBranchScheduler(
                name="deriva-client-release",
                change_filter=util.ChangeFilter(project=['deriva-client']),
                treeStableTimer=360,
                fileIsImportant=changeIsImportant,
                builderNames=["deriva-client-bundle-release-Windows", "deriva-client-bundle-release-MacOS"]))
c['schedulers'].append(
        schedulers.SingleBranchScheduler(
                name="deriva-docs",
                change_filter=util.ChangeFilter(project=["deriva-py",
                                                         "deriva-qt",
                                                         "deriva-catalog-manage",
                                                         "deriva-web",
                                                         "hatrac",
                                                         "ermrest",
                                                         "ermrestjs",
                                                         "chaise"]),
                treeStableTimer=360,
                fileIsImportant=isDocsChange,
                builderNames=["deriva-docs"]))
c['schedulers'].append(
        schedulers.ForceScheduler(
                name="force-dev",
                label="Trigger development build",
                builderNames=["deriva-client-bundle-Windows", "deriva-client-bundle-MacOS"]))
c['schedulers'].append(
        schedulers.ForceScheduler(
                name="force-release",
                label="Trigger release build",
                builderNames=["deriva-client-bundle-release-Windows", "deriva-client-bundle-release-MacOS"]))
c['schedulers'].append(
        schedulers.ForceScheduler(
                name="force-docs",
                label="Trigger docs build",
                builderNames=["deriva-docs"]))

version_step = \
        steps.SetPropertyFromCommand(
                name="get deriva-client-bundle version",
                haltOnFailure=True,
                workdir="deriva-client-bundle",
                command="python ./version.py",
                property="deriva_client_bundle_version")


version_from_file_step_win = \
        steps.SetPropertyFromCommand(
                name="get deriva-client-bundle version",
                haltOnFailure=True,
                workdir="deriva-client-bundle",
                command="type deriva-client-bundle-version.txt",
                property="deriva_client_bundle_version")


####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

# The devFactory is a base factory intended to be reused by more platform-specific build factories.
devFactory = util.BuildFactory()
# check out the source
devFactory.addStep(
        steps.Git(
                repourl='git://github.com/informatics-isi-edu/deriva-py.git',
                workdir='deriva-py',
                name='clone deriva-py',
                alwaysUseLatest=True,
                clobberOnFailure=True,
                haltOnFailure=True,
                retryFetch=True,
                mode='full',
                method='clobber'))
devFactory.addStep(
        steps.Git(
                repourl='git://github.com/informatics-isi-edu/deriva-catalog-manage.git',
                workdir='deriva-catalog-manage',
                name='clone deriva-catalog-manage',
                alwaysUseLatest=True,
                clobberOnFailure=True,
                haltOnFailure=True,
                retryFetch=True,
                mode='full',
                method='clobber'))
devFactory.addStep(
        steps.Git(
                repourl='git://github.com/informatics-isi-edu/deriva-qt.git',
                workdir='deriva-qt',
                name='clone deriva-qt',
                alwaysUseLatest=True,
                clobberOnFailure=True,
                haltOnFailure=True,
                retryFetch=True,
                mode='full',
                method='clobber'))
devFactory.addStep(
        steps.Git(
                repourl='git://github.com/informatics-isi-edu/deriva-client-bundle.git',
                workdir='deriva-client-bundle',
                name='clone deriva-client-bundle',
                alwaysUseLatest=True,
                clobberOnFailure=True,
                haltOnFailure=True,
                retryFetch=True,
                mode='full',
                method='clobber'))

# install deriva-py dependencies and code
devFactory.addStep(
        steps.ShellSequence(
                name='install deriva-py',
                haltOnFailure=True,
                description='installing',
                descriptionDone='install',
                workdir='deriva-py',
                env={"PYTHONPATH": "."},
                commands=[
                        util.ShellArg(command=['pip', 'install', '--upgrade', '.'], logfile='install deriva-py')]))

# install deriva-catalog-manage dependencies and code
devFactory.addStep(
        steps.ShellSequence(
                name='install deriva-catalog-manage',
                haltOnFailure=True,
                description='installing',
                descriptionDone='install',
                workdir='deriva-catalog-manage',
                env={"PYTHONPATH": "."},
                commands=[
                        util.ShellArg(command=['pip', 'install', '--upgrade', '.'],
                                      logfile='install deriva-catalog-manage')]))

# install deriva-qt dependencies and code
devFactory.addStep(
        steps.ShellSequence(
                name='install deriva-qt',
                haltOnFailure=True,
                description='installing',
                descriptionDone='install',
                workdir='deriva-qt',
                env={"PYTHONPATH": "."},
                commands=[
                        util.ShellArg(command=['pip', 'install', '--upgrade', '.'], logfile='install deriva-qt')]))
devFactory.addStep(version_step)

# generate dev mac bundle
macDevFactory = deepcopy(devFactory)
macDevFactory.addStep(
        steps.ShellSequence(
                name='create mac dev bundle',
                haltOnFailure=True,
                description='compiling',
                descriptionDone='bundle',
                workdir='deriva-client-bundle',
                env={"PYTHONPATH": "."},
                commands=[
                        util.ShellArg(command=['rm', '-rf', './build'], logfile='clean build dir'),
                        util.ShellArg(command=['python', 'setup.py', 'bdist_mac'], logfile='build mac app'),
                        util.ShellArg(command=['packagesbuild', '--verbose', './packaging/MacOS/Deriva Client Tools.pkgproj'], logfile='create mac installer package'),
                        util.ShellArg(command=['hdiutil', 'create', '-fs', 'HFSX', '-format', 'UDZO', '-imagekey', 'zlib-level=9', '-srcfolder', './build/Deriva Client Tools.mpkg', '-volname', util.Interpolate('DERIVA Client Tools-%(prop:deriva_client_bundle_version)s'), util.Interpolate('./build/DERIVA-Client-Tools-%(prop:deriva_client_bundle_version)s-osx')], logfile='create dmg from installer package')]))

# upload dev mac bundle
macDevFactory.addStep(
        steps.FileUpload(
                name=util.Interpolate('Upload File: DERIVA-Client-Tools-%(prop:deriva_client_bundle_version)s-osx.dmg'),
                haltOnFailure=True,
                workdir='deriva-client-bundle/build',
                workersrc=util.Interpolate('DERIVA-Client-Tools-%(prop:deriva_client_bundle_version)s-osx.dmg'),
                mode=0o644,
                masterdest=util.Interpolate("/lfs1/buildbot/public_html/deriva-client-bundle/dev/DERIVA-Client-Tools-%(prop:deriva_client_bundle_version)s-%(kw:timestamp)s-osx.dmg", timestamp=now),
                url=util.Interpolate("http://buildbot.isrd.isi.edu/~buildbot/deriva-client-bundle/dev/DERIVA-Client-Tools-%(prop:deriva_client_bundle_version)s-%(kw:timestamp)s-osx.dmg", timestamp=now)))

# The releaseFactory is a base factory intended to be reused by more platform-specific build factories.
releaseFactory = util.BuildFactory()
releaseFactory.addStep(
        steps.Git(
                repourl='git://github.com/informatics-isi-edu/deriva-client-bundle.git',
                workdir='deriva-client-bundle',
                name='clone deriva-client-bundle',
                alwaysUseLatest=True,
                clobberOnFailure=True,
                haltOnFailure=True,
                retryFetch=True,
                mode='full',
                method='clobber'))
releaseFactory.addStep(
        steps.ShellSequence(
                name='install deriva-client',
                haltOnFailure=True,
                description='installing',
                descriptionDone='install',
                workdir='deriva-client-bundle',
                env={"PYTHONPATH": "."},
                commands=[util.ShellArg(command=['pip', 'install', '-r', "requirements.txt"],
                                        logfile='install deriva-client')]))
releaseFactory.addStep(version_step)

# generate release mac bundle
macReleaseFactory = deepcopy(releaseFactory)
macReleaseFactory.addStep(
        steps.ShellSequence(
                name='create mac release bundle',
                haltOnFailure=True,
                description='compiling',
                descriptionDone='bundle',
                workdir='deriva-client-bundle',
                env={"PYTHONPATH": "."},
                commands=[
                        util.ShellArg(command=['rm', '-rf', './build'], logfile='clean build dir'),
                        util.ShellArg(command=['python', 'setup.py', 'bdist_mac'], logfile='build mac app'),
                        util.ShellArg(command=['packagesbuild', '--verbose', './packaging/MacOS/Deriva Client Tools.pkgproj'], logfile='create mac installer package'),
                        util.ShellArg(command=['hdiutil', 'create', '-fs', 'HFSX', '-format', 'UDZO', '-imagekey', 'zlib-level=9', '-srcfolder', './build/Deriva Client Tools.mpkg', '-volname', util.Interpolate('DERIVA Client Tools-%(prop:deriva_client_bundle_version)s'), util.Interpolate('./build/DERIVA-Client-Tools-%(prop:deriva_client_bundle_version)s-osx')], logfile='create dmg from installer package')]))

# upload release mac bundle
macReleaseFactory.addStep(
        steps.FileUpload(
                name=util.Interpolate('Upload File: DERIVA-Client-Tools-%(prop:deriva_client_bundle_version)s-osx.dmg'),
                haltOnFailure=True,
                workdir='deriva-client-bundle/build',
                workersrc=util.Interpolate('DERIVA-Client-Tools-%(prop:deriva_client_bundle_version)s-osx.dmg'),
                mode=0o644,
                masterdest=util.Interpolate("/lfs1/buildbot/public_html/deriva-client-bundle/release/DERIVA-Client-Tools-%(prop:deriva_client_bundle_version)s-osx.dmg"),
                url=util.Interpolate("http://buildbot.isrd.isi.edu/~buildbot/deriva-client-bundle/release/DERIVA-Client-Tools-%(prop:deriva_client_bundle_version)s-osx.dmg")))

# Windows Builders (Docker)
# The Windows build moves most of the above builder logic into Docker containers.
winDockerReleaseFactory = util.BuildFactory()
# configure windows docker release factory
winDockerReleaseFactory.addStep(
        steps.ShellCommand(
                name='create windows release bundle',
                haltOnFailure=True,
                description='compiling',
                descriptionDone='bundle',
                workdir='deriva-client-bundle',
                command=["powershell", "docker", "run", "--rm", "--isolation=process",
                         "-v", "${pwd}:C:\\buildenv\\build-deriva-client-release\\output",
                         "-w", "C:\\buildenv\\build-deriva-client-release",
                         "isrddev/deriva-client-bundle-base-windows",
                         "powershell", ".\\build-release.ps1"]))
winDockerReleaseFactory.addStep(version_from_file_step_win)

# upload release windows bundle archives
winDockerReleaseFactory.addStep(
        steps.FileUpload(
                name=util.Interpolate('Upload File: DERIVA-Client-Tools-%(prop:deriva_client_bundle_version)s-win-amd64.msi'),
                haltOnFailure=True,
                workdir='deriva-client-bundle',
                workersrc=util.Interpolate('DERIVA-Client-Tools-%(prop:deriva_client_bundle_version)s-win-amd64.msi'),
                mode=0o644,
                masterdest=util.Interpolate("/lfs1/buildbot/public_html/deriva-client-bundle/release/DERIVA-Client-Tools-%(prop:deriva_client_bundle_version)s-win-amd64.msi"),
                url=util.Interpolate("http://buildbot.isrd.isi.edu/~buildbot/deriva-client-bundle/release/DERIVA-Client-Tools-%(prop:deriva_client_bundle_version)s-win-amd64.msi")))


# configure windows docker dev factory
winDockerDevFactory = util.BuildFactory()
winDockerDevFactory.addStep(
        steps.ShellCommand(
                name='create windows dev bundle',
                haltOnFailure=True,
                description='compiling',
                descriptionDone='bundle',
                workdir='deriva-client-bundle',
                command=["powershell", "docker", "run", "--rm", "--isolation=process",
                         "-v", "${pwd}:C:\\buildenv\\build-deriva-client-dev\\output",
                         "-w", "C:\\buildenv\\build-deriva-client-dev",
                         "isrddev/deriva-client-bundle-base-windows",
                         "powershell", ".\\build-dev.ps1"]))
winDockerDevFactory.addStep(version_from_file_step_win)

# upload dev windows bundle archives
winDockerDevFactory.addStep(
        steps.FileUpload(
                name=util.Interpolate('Upload File: DERIVA-Client-Tools-%(prop:deriva_client_bundle_version)s-win-amd64.msi'),
                haltOnFailure=True,
                workdir='deriva-client-bundle',
                workersrc=util.Interpolate('DERIVA-Client-Tools-%(prop:deriva_client_bundle_version)s-win-amd64.msi'),
                mode=0o644,
                masterdest=util.Interpolate("/lfs1/buildbot/public_html/deriva-client-bundle/dev/DERIVA-Client-Tools-%(prop:deriva_client_bundle_version)s-%(kw:timestamp)s-win-amd64.msi", timestamp=now),
                url=util.Interpolate("http://buildbot.isrd.isi.edu/~buildbot/deriva-client-bundle/dev/DERIVA-Client-Tools-%(prop:deriva_client_bundle_version)s-%(kw:timestamp)s-win-amd64.msi", timestamp=now)))

# configure windows docker docs factory
winDockerDocsFactory = util.BuildFactory()
winDockerDocsFactory.addStep(
        steps.ShellCommand(
                name='build documentation',
                haltOnFailure=True,
                description='compiling',
                descriptionDone='generate docs',
                workdir='deriva-docs',
                command=["powershell", "docker", "run", "--rm", "--platform", "linux",
                         "-e", util.Interpolate("GITHUB_TOKEN=%(secret:github_deriva_docs_token)s"),
                         "isrddev/deriva-docs", "build", "2>&1", "|", "%{\"$_\"};", "exit $?"]))


# now bind the builders to the appropriate build factories and workers
c['builders'] = []
c['builders'].append(
    util.BuilderConfig(
                name="deriva-docs",
                workernames=["Windows-10-docs"],
                factory=winDockerDocsFactory))
c['builders'].append(
    util.BuilderConfig(
                name="deriva-client-bundle-Windows",
                workernames=["Windows-10"],
                factory=winDockerDevFactory))
c['builders'].append(
    util.BuilderConfig(
                name="deriva-client-bundle-release-Windows",
                workernames=["Windows-10-release"],
                factory=winDockerReleaseFactory))

c['builders'].append(
    util.BuilderConfig(
                name="deriva-client-bundle-MacOS",
                workernames=["MacOS-10_11"],
                factory=macDevFactory))
c['builders'].append(
    util.BuilderConfig(
                name="deriva-client-bundle-release-MacOS",
                workernames=["MacOS-10_11-release"],
                factory=macReleaseFactory))

####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.
context = Interpolate("buildbot/%(prop:buildername)s")
gs = reporters.GitHubStatusPush(token=util.Secret("github_status_push"),
                                context=context,
                                startDescription='Build started.',
                                endDescription='Build finished.')
c['services'] = [gs]

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "ISRD Buildbot"
c['titleURL'] = "https://github.com/informatics-isi-edu/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = "http://buildbot.isrd.isi.edu/"

# minimalistic config to activate new web UI
c['www'] = dict(port=8010,
                plugins=dict(badges={}, waterfall_view={}, console_view={}, grid_view={}),
                auth=util.GitHubAuth("4a20ae7f63cb24ba75a3",
                                     get_secret("github_auth_secret"),
                                     apiVersion=4,
                                     getTeamsMembership=True),
                authz=util.Authz(allowRules=[util.AnyControlEndpointMatcher(role="committers")],
                                 roleMatchers=[util.RolesFromGroups(groupPrefix='informatics-isi-edu/')])
                )

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url': "sqlite:///state.sqlite",
}
